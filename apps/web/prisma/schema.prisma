// Prisma schema for Shellff Slice 0 foundation
// Defines core identity, roles, audit logging, and feature flag structures.

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RoleType {
  LISTENER
  CREATOR
  ADMIN
  MODERATOR
}

enum FeatureFlagRolloutType {
  STATIC
  PERCENTAGE
  TARGETED
}

enum FeatureFlagEnvironment {
  LOCAL
  STAGING
  PRODUCTION
}

enum ReleaseType {
  DIGITAL
  PHYSICAL
  HYBRID
}

enum UnlockCodeStatus {
  UNUSED
  REDEEMED
  REVOKED
}

enum ReleaseAccessSource {
  PURCHASE
  UNLOCK_CODE
  ADMIN_GRANT
}

enum WalletType {
  PURCHASES
  EARNINGS
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  PURCHASE
  EARNING
  TRANSFER
  FEE
  REFUND
  VOUCHER_REDEMPTION
}

enum TransactionStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  EXPIRED
}

enum PaymentProvider {
  PAYSTACK
  OPAY
  STRIPE
  MYFATOORAH
  CRYPTO_SOL
  VOUCHER
  ADMIN_CREDIT
}

enum DownloadStatus {
  PENDING
  PREPARING
  READY
  FAILED
}

enum DownloadFormat {
  MP3
  FLAC
  WAV
}

enum SessionStatus {
  ACTIVE
  REVOKED
  EXPIRED
  TERMINATED
}

enum OtpCodeType {
  LOGIN
  PASSWORD_RESET
  VERIFICATION
}

model User {
  id                   String                @id @default(uuid())
  email                String                @unique
  phone                String?               @unique
  publicId             String?               @unique
  passwordHash         String
  displayName          String
  primaryRole          RoleType              @default(LISTENER)
  status               String                @default("active")
  creatorProfile       Creator?
  roles                UserRole[]
  refreshTokens        RefreshToken[]
  otpCodes             OtpCode[]
  passwordResetTokens  PasswordResetToken[]
  sessions             UserSession[]
  devices              UserDevice[]
  auditLogs            AuditLog[]            @relation("AuditActor")
  featureFlagOverrides FeatureFlagOverride[]
  releases             Release[]
  createdUnlockCodes   UnlockCode[]          @relation("CreatorUnlockCodes")
  redeemedUnlockCodes  UnlockCode[]          @relation("RedeemerUnlockCodes")
  releaseAccesses      ReleaseAccess[]
  wallets              Wallet[]
  downloadBundles      DownloadBundle[]
  codeRedemptionLogs   CodeRedemptionLog[]
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
}

model Role {
  id        Int        @id @default(autoincrement())
  name      RoleType   @unique
  users     UserRole[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model UserRole {
  userId     String
  roleId     Int
  assignedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
  @@index([roleId])
}

model Creator {
  id          String   @id @default(uuid())
  userId      String   @unique
  creatorCode String   @unique
  createdAt   DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AuditLog {
  id          String   @id @default(uuid())
  actorUserId String?
  actorType   String
  event       String
  target      String?
  metadata    Json?
  requestId   String?
  createdAt   DateTime @default(now())

  actor User? @relation("AuditActor", fields: [actorUserId], references: [id], onDelete: SetNull)

  @@index([actorUserId])
  @@index([event])
  @@index([createdAt])
}

model FeatureFlag {
  id          String                 @id @default(uuid())
  key         String                 @unique
  description String?
  enabled     Boolean                @default(false)
  rolloutType FeatureFlagRolloutType @default(STATIC)
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
  overrides   FeatureFlagOverride[]
}

model FeatureFlagOverride {
  id          String                 @id @default(uuid())
  flagId      String
  userId      String?
  environment FeatureFlagEnvironment @default(LOCAL)
  value       Boolean                @default(false)
  notes       String?
  createdAt   DateTime               @default(now())

  flag FeatureFlag @relation(fields: [flagId], references: [id], onDelete: Cascade)
  user User?       @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@unique([flagId, environment, userId])
  @@index([flagId])
  @@index([userId])
}

model RefreshToken {
  id                String    @id @default(uuid())
  userId            String
  tokenHash         String
  issuedAt          DateTime  @default(now())
  expiresAt         DateTime
  revokedAt         DateTime?
  replacedByTokenId String?
  sessionId         String?
  userAgent         String?
  ipAddress         String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  session        UserSession?   @relation(fields: [sessionId], references: [id], onDelete: SetNull)
  replacement    RefreshToken?  @relation("RefreshTokenReplacement", fields: [replacedByTokenId], references: [id])
  replacedTokens RefreshToken[] @relation("RefreshTokenReplacement")

  @@index([userId])
  @@unique([tokenHash])
  @@index([sessionId])
}

model PasswordResetToken {
  id           String    @id @default(uuid())
  userId       String
  tokenHash    String    @unique
  expiresAt    DateTime
  consumedAt   DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  createdByIp  String?
  consumedByIp String?
  userAgent    String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
  @@index([userId, consumedAt])
}

model OtpCode {
  id           String     @id @default(uuid())
  userId       String
  codeHash     String
  type         OtpCodeType
  expiresAt    DateTime
  consumedAt   DateTime?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  createdByIp  String?
  consumedByIp String?
  userAgent    String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, type, consumedAt])
  @@index([expiresAt])
}

model UserDevice {
  id          String    @id @default(uuid())
  userId      String
  fingerprint String?
  deviceName  String?
  deviceType  String?
  platform    String?
  osVersion   String?
  appVersion  String?
  pushToken   String?
  userAgent   String?
  trusted     Boolean   @default(true)
  firstSeenAt DateTime  @default(now())
  lastSeenAt  DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user     User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  sessions UserSession[]

  @@index([userId])
  @@index([fingerprint])
  @@index([pushToken])
  @@index([userId, trusted])
}

model UserSession {
  id               String        @id @default(uuid())
  userId           String
  deviceId         String?
  sessionTokenHash String        @unique
  status           SessionStatus @default(ACTIVE)
  ipAddress        String?
  userAgent        String?
  location         Json?
  expiresAt        DateTime
  lastSeenAt       DateTime?
  signedOutAt      DateTime?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  device        UserDevice?    @relation(fields: [deviceId], references: [id], onDelete: SetNull)
  refreshTokens RefreshToken[]

  @@index([userId])
  @@index([deviceId])
  @@index([status])
  @@index([expiresAt])
  @@index([userId, status, expiresAt])
}

model Release {
  id          String      @id @default(uuid())
  creatorId   String
  title       String
  description String?
  coverArt    String?
  releaseType ReleaseType @default(DIGITAL)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  creator         User             @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  tracks          ReleaseTrack[]
  unlockCodes     UnlockCode[]
  accessGrants    ReleaseAccess[]
  downloadBundles DownloadBundle[]

  @@unique([creatorId, title])
  @@index([creatorId])
}

model ReleaseTrack {
  id        String   @id @default(uuid())
  releaseId String
  title     String
  duration  Int?
  position  Int      @default(0)
  audioUrl  String?
  createdAt DateTime @default(now())

  release        Release         @relation(fields: [releaseId], references: [id], onDelete: Cascade)
  downloadAssets DownloadAsset[]

  @@index([releaseId])
}

model UnlockCode {
  id             String           @id @default(uuid())
  code           String           @unique
  releaseId      String
  creatorId      String
  status         UnlockCodeStatus @default(UNUSED)
  redeemedBy     String?
  redeemedAt     DateTime?
  batchId        String?
  deviceLockedTo String?
  ipLockedTo     String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  release        Release             @relation(fields: [releaseId], references: [id], onDelete: Cascade)
  creator        User                @relation("CreatorUnlockCodes", fields: [creatorId], references: [id], onDelete: Cascade)
  redeemer       User?               @relation("RedeemerUnlockCodes", fields: [redeemedBy], references: [id], onDelete: SetNull)
  redemptionLogs CodeRedemptionLog[]

  @@index([releaseId])
  @@index([creatorId])
  @@index([status])
  @@index([batchId])
}

model CodeRedemptionLog {
  id                String   @id @default(uuid())
  codeId            String
  userId            String
  ipAddress         String?
  userAgent         String?
  deviceFingerprint String?
  success           Boolean  @default(false)
  redeemedAt        DateTime @default(now())

  unlockCode UnlockCode @relation(fields: [codeId], references: [id], onDelete: Cascade)
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([codeId])
  @@index([userId])
  @@index([redeemedAt])
}

model ReleaseAccess {
  id        String              @id @default(uuid())
  releaseId String
  userId    String
  source    ReleaseAccessSource @default(UNLOCK_CODE)
  grantedAt DateTime            @default(now())
  expiresAt DateTime?

  release Release @relation(fields: [releaseId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([releaseId, userId])
  @@index([userId])
}

model Wallet {
  id        String     @id @default(uuid())
  userId    String
  type      WalletType
  balance   Decimal    @default(0) @db.Decimal(20, 8)
  currency  String     @default("USD")
  isActive  Boolean    @default(true)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  user         User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions WalletTransaction[]

  @@unique([userId, type])
  @@index([userId])
}

model WalletTransaction {
  id              String            @id @default(uuid())
  walletId        String
  type            TransactionType
  status          TransactionStatus @default(PENDING)
  amount          Decimal           @db.Decimal(20, 8)
  currency        String
  description     String?
  reference       String?           @unique
  paymentProvider PaymentProvider?
  metadata        Json?             @default("{}")
  fee             Decimal?          @db.Decimal(20, 8)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  completedAt     DateTime?

  wallet Wallet @relation(fields: [walletId], references: [id], onDelete: Cascade)

  @@index([walletId])
  @@index([status])
  @@index([type])
  @@index([createdAt])
}

model PaymentMethod {
  id          String          @id @default(uuid())
  provider    PaymentProvider @unique
  displayName String
  isEnabled   Boolean         @default(true)
  currency    String          @default("USD")
  settings    Json            @default("{}")
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model DownloadBundle {
  id          String         @id @default(uuid())
  userId      String
  releaseId   String
  status      DownloadStatus @default(PENDING)
  requestedAt DateTime       @default(now())
  completedAt DateTime?
  expiresAt   DateTime?

  user    User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  release Release         @relation(fields: [releaseId], references: [id], onDelete: Cascade)
  assets  DownloadAsset[]

  @@index([userId])
  @@index([releaseId])
}

model DownloadAsset {
  id          String         @id @default(uuid())
  bundleId    String
  trackId     String?
  format      DownloadFormat
  quality     String?
  sizeBytes   Int?
  checksum    String?
  downloadUrl String?
  status      DownloadStatus @default(PREPARING)
  createdAt   DateTime       @default(now())

  bundle DownloadBundle @relation(fields: [bundleId], references: [id], onDelete: Cascade)
  track  ReleaseTrack?  @relation(fields: [trackId], references: [id])

  @@index([bundleId])
  @@index([trackId])
}
